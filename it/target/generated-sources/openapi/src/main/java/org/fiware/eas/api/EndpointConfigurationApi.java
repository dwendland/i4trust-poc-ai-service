/*
 * Endpoint Configuration API
 * This spec provides the configuration-api for the endpoint-auth-sidecar.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: stefan.wiedemann@fiware.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fiware.eas.api;

import org.fiware.eas.ApiCallback;
import org.fiware.eas.ApiClient;
import org.fiware.eas.ApiException;
import org.fiware.eas.ApiResponse;
import org.fiware.eas.Configuration;
import org.fiware.eas.Pair;
import org.fiware.eas.ProgressRequestBody;
import org.fiware.eas.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.fiware.eas.model.EndpointInfoVO;
import org.fiware.eas.model.EndpointRegistrationVO;
import org.fiware.eas.model.ProblemDetailsVO;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EndpointConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EndpointConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EndpointConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createEndpoint
     * @param endpointRegistrationVO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Will return the endpoint id in the location header. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Received an invalid registration. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Registration already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEndpointCall(EndpointRegistrationVO endpointRegistrationVO, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointRegistrationVO;

        // create path and map variables
        String localVarPath = "/endpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEndpointValidateBeforeCall(EndpointRegistrationVO endpointRegistrationVO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'endpointRegistrationVO' is set
        if (endpointRegistrationVO == null) {
            throw new ApiException("Missing the required parameter 'endpointRegistrationVO' when calling createEndpoint(Async)");
        }
        

        okhttp3.Call localVarCall = createEndpointCall(endpointRegistrationVO, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new endpoint configuration.
     * @param endpointRegistrationVO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Will return the endpoint id in the location header. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Received an invalid registration. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Registration already exists. </td><td>  -  </td></tr>
     </table>
     */
    public void createEndpoint(EndpointRegistrationVO endpointRegistrationVO) throws ApiException {
        createEndpointWithHttpInfo(endpointRegistrationVO);
    }

    /**
     * 
     * Create a new endpoint configuration.
     * @param endpointRegistrationVO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Will return the endpoint id in the location header. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Received an invalid registration. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Registration already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createEndpointWithHttpInfo(EndpointRegistrationVO endpointRegistrationVO) throws ApiException {
        okhttp3.Call localVarCall = createEndpointValidateBeforeCall(endpointRegistrationVO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a new endpoint configuration.
     * @param endpointRegistrationVO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Will return the endpoint id in the location header. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Received an invalid registration. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Registration already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEndpointAsync(EndpointRegistrationVO endpointRegistrationVO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEndpointValidateBeforeCall(endpointRegistrationVO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEndpoint
     * @param id Id of the registered endpoint. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The endpoint was successfully removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEndpointCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoint/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEndpointValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEndpoint(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEndpointCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete the endpoint for the given id.
     * @param id Id of the registered endpoint. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The endpoint was successfully removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEndpoint(UUID id) throws ApiException {
        deleteEndpointWithHttpInfo(id);
    }

    /**
     * 
     * Delete the endpoint for the given id.
     * @param id Id of the registered endpoint. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The endpoint was successfully removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEndpointWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteEndpointValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the endpoint for the given id.
     * @param id Id of the registered endpoint. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The endpoint was successfully removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEndpointAsync(UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEndpointValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEndpointInfo
     * @param id Id of the registered endpoint. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about the endpoint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEndpointInfoCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoint/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEndpointInfoValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEndpointInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getEndpointInfoCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return the endpoint information for the given id.
     * @param id Id of the registered endpoint. (required)
     * @return EndpointInfoVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about the endpoint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint exists. </td><td>  -  </td></tr>
     </table>
     */
    public EndpointInfoVO getEndpointInfo(UUID id) throws ApiException {
        ApiResponse<EndpointInfoVO> localVarResp = getEndpointInfoWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the endpoint information for the given id.
     * @param id Id of the registered endpoint. (required)
     * @return ApiResponse&lt;EndpointInfoVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about the endpoint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointInfoVO> getEndpointInfoWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = getEndpointInfoValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EndpointInfoVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the endpoint information for the given id.
     * @param id Id of the registered endpoint. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The information about the endpoint. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEndpointInfoAsync(UUID id, final ApiCallback<EndpointInfoVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEndpointInfoValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EndpointInfoVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEndpoints
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of endpoints. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEndpointsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEndpointsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getEndpointsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get all configured endpoints.
     * @return List&lt;EndpointInfoVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of endpoints. </td><td>  -  </td></tr>
     </table>
     */
    public List<EndpointInfoVO> getEndpoints() throws ApiException {
        ApiResponse<List<EndpointInfoVO>> localVarResp = getEndpointsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get all configured endpoints.
     * @return ApiResponse&lt;List&lt;EndpointInfoVO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of endpoints. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EndpointInfoVO>> getEndpointsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEndpointsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<EndpointInfoVO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all configured endpoints.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of endpoints. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEndpointsAsync(final ApiCallback<List<EndpointInfoVO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEndpointsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<EndpointInfoVO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCredentialConfiguration
     * @param id Id of the registered endpoint. (required)
     * @param credential The credential(part) to be updated. In case of iShare this could be signingKey or certificateChain for example. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credential was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint or credential exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCredentialConfigurationCall(UUID id, String credential, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/endpoint/{id}/{credential}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "credential" + "\\}", localVarApiClient.escapeString(credential.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCredentialConfigurationValidateBeforeCall(UUID id, String credential, String body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCredentialConfiguration(Async)");
        }
        
        // verify the required parameter 'credential' is set
        if (credential == null) {
            throw new ApiException("Missing the required parameter 'credential' when calling updateCredentialConfiguration(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateCredentialConfiguration(Async)");
        }
        

        okhttp3.Call localVarCall = updateCredentialConfigurationCall(id, credential, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update credential related configuration for a given endpoint.
     * @param id Id of the registered endpoint. (required)
     * @param credential The credential(part) to be updated. In case of iShare this could be signingKey or certificateChain for example. (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credential was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint or credential exists. </td><td>  -  </td></tr>
     </table>
     */
    public void updateCredentialConfiguration(UUID id, String credential, String body) throws ApiException {
        updateCredentialConfigurationWithHttpInfo(id, credential, body);
    }

    /**
     * 
     * Update credential related configuration for a given endpoint.
     * @param id Id of the registered endpoint. (required)
     * @param credential The credential(part) to be updated. In case of iShare this could be signingKey or certificateChain for example. (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credential was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint or credential exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateCredentialConfigurationWithHttpInfo(UUID id, String credential, String body) throws ApiException {
        okhttp3.Call localVarCall = updateCredentialConfigurationValidateBeforeCall(id, credential, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update credential related configuration for a given endpoint.
     * @param id Id of the registered endpoint. (required)
     * @param credential The credential(part) to be updated. In case of iShare this could be signingKey or certificateChain for example. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The credential was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such endpoint or credential exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCredentialConfigurationAsync(UUID id, String credential, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCredentialConfigurationValidateBeforeCall(id, credential, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
