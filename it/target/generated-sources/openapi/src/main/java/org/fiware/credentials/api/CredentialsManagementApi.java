/*
 * iShare Credentials Management API
 * This spec provides the credentials management api for the iShare auth-provider.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: stefan.wiedemann@fiware.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fiware.credentials.api;

import org.fiware.credentials.ApiCallback;
import org.fiware.credentials.ApiClient;
import org.fiware.credentials.ApiException;
import org.fiware.credentials.ApiResponse;
import org.fiware.credentials.Configuration;
import org.fiware.credentials.Pair;
import org.fiware.credentials.ProgressRequestBody;
import org.fiware.credentials.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.fiware.credentials.model.IShareCredentialsVO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CredentialsManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CredentialsManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CredentialsManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteCredentials
     * @param clientId Id of the client. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The client was successfully removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialsCall(String clientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credentials/{clientId}"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCredentialsValidateBeforeCall(String clientId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling deleteCredentials(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCredentialsCall(clientId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete the client-credentials for the given id.
     * @param clientId Id of the client. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The client was successfully removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCredentials(String clientId) throws ApiException {
        deleteCredentialsWithHttpInfo(clientId);
    }

    /**
     * 
     * Delete the client-credentials for the given id.
     * @param clientId Id of the client. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The client was successfully removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCredentialsWithHttpInfo(String clientId) throws ApiException {
        okhttp3.Call localVarCall = deleteCredentialsValidateBeforeCall(clientId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the client-credentials for the given id.
     * @param clientId Id of the client. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The client was successfully removed. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialsAsync(String clientId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCredentialsValidateBeforeCall(clientId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCredentialsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clientIds. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCredentialsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCredentialsListCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * Get all clientIds that have credentials configured.
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clientIds. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getCredentialsList() throws ApiException {
        ApiResponse<List<String>> localVarResp = getCredentialsListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get all clientIds that have credentials configured.
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clientIds. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getCredentialsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCredentialsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all clientIds that have credentials configured.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of clientIds. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCredentialsListAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCredentialsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCredentials
     * @param clientId Id of the client. (required)
     * @param ishareCredentialsVO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Received an invalid credentials definition. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Client already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCredentialsCall(String clientId, IShareCredentialsVO ishareCredentialsVO, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ishareCredentialsVO;

        // create path and map variables
        String localVarPath = "/credentials/{clientId}"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCredentialsValidateBeforeCall(String clientId, IShareCredentialsVO ishareCredentialsVO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling postCredentials(Async)");
        }
        
        // verify the required parameter 'ishareCredentialsVO' is set
        if (ishareCredentialsVO == null) {
            throw new ApiException("Missing the required parameter 'ishareCredentialsVO' when calling postCredentials(Async)");
        }
        

        okhttp3.Call localVarCall = postCredentialsCall(clientId, ishareCredentialsVO, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new endpoint configuration.
     * @param clientId Id of the client. (required)
     * @param ishareCredentialsVO  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Received an invalid credentials definition. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Client already exists. </td><td>  -  </td></tr>
     </table>
     */
    public void postCredentials(String clientId, IShareCredentialsVO ishareCredentialsVO) throws ApiException {
        postCredentialsWithHttpInfo(clientId, ishareCredentialsVO);
    }

    /**
     * 
     * Create a new endpoint configuration.
     * @param clientId Id of the client. (required)
     * @param ishareCredentialsVO  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Received an invalid credentials definition. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Client already exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postCredentialsWithHttpInfo(String clientId, IShareCredentialsVO ishareCredentialsVO) throws ApiException {
        okhttp3.Call localVarCall = postCredentialsValidateBeforeCall(clientId, ishareCredentialsVO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a new endpoint configuration.
     * @param clientId Id of the client. (required)
     * @param ishareCredentialsVO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Received an invalid credentials definition. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Client already exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCredentialsAsync(String clientId, IShareCredentialsVO ishareCredentialsVO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCredentialsValidateBeforeCall(clientId, ishareCredentialsVO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCertificateChain
     * @param clientId Id of the client. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The certificate chain was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCertificateChainCall(String clientId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/credentials/{clientId}/certificateChain"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putCertificateChainValidateBeforeCall(String clientId, String body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling putCertificateChain(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putCertificateChain(Async)");
        }
        

        okhttp3.Call localVarCall = putCertificateChainCall(clientId, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update the certificate chain for a given client.
     * @param clientId Id of the client. (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The certificate chain was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public void putCertificateChain(String clientId, String body) throws ApiException {
        putCertificateChainWithHttpInfo(clientId, body);
    }

    /**
     * 
     * Update the certificate chain for a given client.
     * @param clientId Id of the client. (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The certificate chain was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putCertificateChainWithHttpInfo(String clientId, String body) throws ApiException {
        okhttp3.Call localVarCall = putCertificateChainValidateBeforeCall(clientId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update the certificate chain for a given client.
     * @param clientId Id of the client. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The certificate chain was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putCertificateChainAsync(String clientId, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putCertificateChainValidateBeforeCall(clientId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSigningKey
     * @param clientId Id of the client. (required)
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The signing key was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSigningKeyCall(String clientId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/credentials/{clientId}/signingKey"
            .replaceAll("\\{" + "clientId" + "\\}", localVarApiClient.escapeString(clientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSigningKeyValidateBeforeCall(String clientId, String body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling putSigningKey(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putSigningKey(Async)");
        }
        

        okhttp3.Call localVarCall = putSigningKeyCall(clientId, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update the certificate chain for a given client.
     * @param clientId Id of the client. (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The signing key was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public void putSigningKey(String clientId, String body) throws ApiException {
        putSigningKeyWithHttpInfo(clientId, body);
    }

    /**
     * 
     * Update the certificate chain for a given client.
     * @param clientId Id of the client. (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The signing key was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putSigningKeyWithHttpInfo(String clientId, String body) throws ApiException {
        okhttp3.Call localVarCall = putSigningKeyValidateBeforeCall(clientId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update the certificate chain for a given client.
     * @param clientId Id of the client. (required)
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The signing key was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No such client exists. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSigningKeyAsync(String clientId, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSigningKeyValidateBeforeCall(clientId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
