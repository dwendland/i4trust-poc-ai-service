/*
 * Endpoint Configuration API
 * This spec provides the configuration-api for the endpoint-auth-sidecar.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: stefan.wiedemann@fiware.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.fiware.eas.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.fiware.eas.model.AuthCredentialsVO;
import org.fiware.eas.model.AuthTypeVO;

/**
 * Information about a Endpoint to be registered.
 */
@ApiModel(description = "Information about a Endpoint to be registered.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-14T13:33:54.069821+02:00[Europe/Berlin]")
public class EndpointRegistrationVO {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_TARGET_PORT = "targetPort";
  @SerializedName(SERIALIZED_NAME_TARGET_PORT)
  private Integer targetPort;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path = "/";

  public static final String SERIALIZED_NAME_USE_HTTPS = "useHttps";
  @SerializedName(SERIALIZED_NAME_USE_HTTPS)
  private Boolean useHttps = false;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "authType";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private AuthTypeVO authType;

  public static final String SERIALIZED_NAME_AUTH_CREDENTIALS = "authCredentials";
  @SerializedName(SERIALIZED_NAME_AUTH_CREDENTIALS)
  private AuthCredentialsVO authCredentials;

  public EndpointRegistrationVO() { 
  }

  public EndpointRegistrationVO domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Domain that the endpoint will receive notifications at.
   * @return domain
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "myEndpoint.com", required = true, value = "Domain that the endpoint will receive notifications at.")

  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public EndpointRegistrationVO port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Port that the endpoint will receive notifications at.
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Port that the endpoint will receive notifications at.")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }


  public EndpointRegistrationVO targetPort(Integer targetPort) {
    
    this.targetPort = targetPort;
    return this;
  }

   /**
   * Port to contact at the actual endpoint. Can be used to overwrite the one in &#x60;port&#x60;, for example when http default port(80) should be overwritten with https(443).
   * @return targetPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Port to contact at the actual endpoint. Can be used to overwrite the one in `port`, for example when http default port(80) should be overwritten with https(443).")

  public Integer getTargetPort() {
    return targetPort;
  }


  public void setTargetPort(Integer targetPort) {
    this.targetPort = targetPort;
  }


  public EndpointRegistrationVO path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Path that the endpoint will receive notifications at.
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "/notification/receive", value = "Path that the endpoint will receive notifications at.")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public EndpointRegistrationVO useHttps(Boolean useHttps) {
    
    this.useHttps = useHttps;
    return this;
  }

   /**
   * Should the proxy forward the notification via https.
   * @return useHttps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Should the proxy forward the notification via https.")

  public Boolean getUseHttps() {
    return useHttps;
  }


  public void setUseHttps(Boolean useHttps) {
    this.useHttps = useHttps;
  }


  public EndpointRegistrationVO authType(AuthTypeVO authType) {
    
    this.authType = authType;
    return this;
  }

   /**
   * Get authType
   * @return authType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AuthTypeVO getAuthType() {
    return authType;
  }


  public void setAuthType(AuthTypeVO authType) {
    this.authType = authType;
  }


  public EndpointRegistrationVO authCredentials(AuthCredentialsVO authCredentials) {
    
    this.authCredentials = authCredentials;
    return this;
  }

   /**
   * Get authCredentials
   * @return authCredentials
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AuthCredentialsVO getAuthCredentials() {
    return authCredentials;
  }


  public void setAuthCredentials(AuthCredentialsVO authCredentials) {
    this.authCredentials = authCredentials;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointRegistrationVO endpointRegistration = (EndpointRegistrationVO) o;
    return Objects.equals(this.domain, endpointRegistration.domain) &&
        Objects.equals(this.port, endpointRegistration.port) &&
        Objects.equals(this.targetPort, endpointRegistration.targetPort) &&
        Objects.equals(this.path, endpointRegistration.path) &&
        Objects.equals(this.useHttps, endpointRegistration.useHttps) &&
        Objects.equals(this.authType, endpointRegistration.authType) &&
        Objects.equals(this.authCredentials, endpointRegistration.authCredentials);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, port, targetPort, path, useHttps, authType, authCredentials);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointRegistrationVO {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    targetPort: ").append(toIndentedString(targetPort)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    useHttps: ").append(toIndentedString(useHttps)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    authCredentials: ").append(toIndentedString(authCredentials)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

